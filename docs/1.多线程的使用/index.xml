<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1.多线程的使用 on 技术学习笔记</title>
    <link>http://example.org/1.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
    <description>Recent content in 1.多线程的使用 on 技术学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Sep 2021 20:38:08 +0800</lastBuildDate><atom:link href="http://example.org/1.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.2线程控制</title>
      <link>http://example.org/1.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/1.2%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Wed, 08 Sep 2021 20:38:08 +0800</pubDate>
      
      <guid>http://example.org/1.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/1.2%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>停止线程      this.interrupted() 测试当前线程是否已经是中断状态，执行后把标志位设置为 false 。
  this.isInterrupted() 测试线程 Thread 是否已经中断，但不清除标志位。
  thread.interrupt()，run 方法中有sleep，使用try的 catch**可以捕捉到 InterruptedException **的。
  异常法停止一个线程，抛出 InterruptedException 。（推荐）
  thread.stop() 暴力停止，不推荐。
  使用 return 停止线程。
  暂停线程     suspend 与resume 它们的缺陷：独占（不同步）。如果子线程中有调用 synchronized 方法，将导致同步锁可能未被释放，在主线程调用相同 synchronized 方法时无法获得锁，程序卡住。  yield 方法    交出控制权
thread.yield()
放弃当前 CPU 资源，让给其他任务去占用。（但放弃的时间不确定，可能很短）
牺牲自我，成就他人。
线程优先级    A 调用 B ，则默认的， B 的优先级与 A 一致。</description>
    </item>
    
    <item>
      <title>1.1线程新建</title>
      <link>http://example.org/1.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/1.1%E6%96%B0%E5%BB%BA%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Wed, 08 Sep 2021 17:54:12 +0800</pubDate>
      
      <guid>http://example.org/1.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/1.1%E6%96%B0%E5%BB%BA%E7%BA%BF%E7%A8%8B/</guid>
      <description>以 Thread 实例的方式    Mythread.java
package threadTest; public class MyThread extends Thread{ @Override public void run(){ super.run(); for (int i = 0; i &amp;lt; 100; i++){ System.out.println(&amp;#34;MyThread:&amp;#34; + i); } } } Main.java
package threadTest; public class main { public static void main(String[] args){ MyThread myThread = new MyThread(); myThread.start(); MyThread myThread1 = new MyThread(); myThread1.start(); System.out.println(&amp;#34;Has been ran&amp;#34;); } } 以包装 Runnable 的方式    因为 Runnable 接口中只有 run 方法，无法启动一个新的线程。所以借由 Thread 的构造，可以新建线程。</description>
    </item>
    
  </channel>
</rss>
