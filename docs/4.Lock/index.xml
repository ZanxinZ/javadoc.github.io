<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>4.Lock on 技术学习笔记</title>
    <link>http://example.org/4.Lock/</link>
    <description>Recent content in 4.Lock on 技术学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Sep 2021 15:52:34 +0800</lastBuildDate><atom:link href="http://example.org/4.Lock/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>4.2 ReentrantReadWriteLock</title>
      <link>http://example.org/4.Lock/4.2ReentrantReadWriteLock/</link>
      <pubDate>Wed, 29 Sep 2021 21:24:17 +0800</pubDate>
      
      <guid>http://example.org/4.Lock/4.2ReentrantReadWriteLock/</guid>
      <description>读写锁包括共享锁（读）、排他锁（写）。
没有线程进行写入操作时，多个读取线程都可以获得锁，而进行写入操作的线程只有获得写入锁才能写入。
 读读共享 写写互斥 读写互斥 写读互斥  读读共享     Service.java import java.util.concurrent.locks.ReentrantReadWriteLock; public class Service { private ReentrantReadWriteLock lock; public Service(ReentrantReadWriteLock lock){ this.lock = lock; } public void read(){ lock.readLock().lock(); System.out.println(Thread.currentThread().getName() + &amp;#34; &amp;#34; +System.currentTimeMillis()); lock.readLock().unlock(); } }   ThreadA.java public class ThreadA extends Thread{ private Service service; public ThreadA(Service service){ this.service = service; } @Override public void run(){ service.read(); } }   ThreadB.java public class ThreadB extends Thread{ private Service service; public ThreadB(Service service){ this.</description>
    </item>
    
    <item>
      <title>4.1ReentrantLock</title>
      <link>http://example.org/4.Lock/4.1ReentrantLock/</link>
      <pubDate>Tue, 28 Sep 2021 16:38:33 +0800</pubDate>
      
      <guid>http://example.org/4.Lock/4.1ReentrantLock/</guid>
      <description>ReentrantLock 可重入锁
 嗅探锁定 多路分支通知  1. 实现同步功能     实现互斥   MyService.java import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; public class MyService { private Lock lock = new ReentrantLock(); public void service(){ lock.lock(); System.out.println(Thread.currentThread().getName()); for (int i = 0; i &amp;lt; 20; i++) { System.out.print(i); } System.out.println(); lock.unlock(); } }   MyThread.java public class MyThread extends Thread{ MyService service; public MyThread(MyService service){ this.service = service; } @Override public void run(){ service.</description>
    </item>
    
  </channel>
</rss>
