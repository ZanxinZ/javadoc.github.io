<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2.对象及变量的并发访问 on 技术学习笔记</title>
    <link>http://example.org/2.%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/</link>
    <description>Recent content in 2.对象及变量的并发访问 on 技术学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Sep 2021 20:54:46 +0800</lastBuildDate><atom:link href="http://example.org/2.%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2.3其它方法</title>
      <link>http://example.org/2.%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/2.3%E5%85%B6%E5%AE%83%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 08 Sep 2021 21:17:32 +0800</pubDate>
      
      <guid>http://example.org/2.%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/2.3%E5%85%B6%E5%AE%83%E6%96%B9%E6%B3%95/</guid>
      <description>1. volatile 关键字    为了实现变量在多个线程间可见。使得线程从公共堆栈中获取变量，而不是线程私有数据栈。
JVM 在 -sever 模式时为了线程运行效率，线程一直在私有堆栈中获取变量值，而主线程的变量是存储在公共堆栈中，解决这种可见性问题，可以使用 volatile 。
volatile 与 synchronized 的比较：
  volatile 保证可见性但不保证原子性（致命缺点），synchronized 保证原子性但不保证可见性。
  volatile 只能修饰变量。
  volatile 不发生阻塞，synchronized 会阻塞。
  2. 原子类    多线程使用原子操作访问共享资源时，不需要锁也可保证线程安全（多线程访问同一资源时，不会出现脏读或写失败）。
以下代码，多个线程竞争地访问同一个对象中的 count ， 使用原子操作保证了线程安全。
  CountService.java
public class CountService extends Thread{ private AtomicInteger count = new AtomicInteger(0);//原子类  @Override public void run(){ for (int i = 0; i &amp;lt; 1000; i++){ System.</description>
    </item>
    
    <item>
      <title>2.2同步中的无限等待</title>
      <link>http://example.org/2.%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/2.2%E5%90%8C%E6%AD%A5%E4%B8%AD%E7%9A%84%E6%97%A0%E9%99%90%E7%AD%89%E5%BE%85/</link>
      <pubDate>Wed, 08 Sep 2021 21:04:03 +0800</pubDate>
      
      <guid>http://example.org/2.%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/2.2%E5%90%8C%E6%AD%A5%E4%B8%AD%E7%9A%84%E6%97%A0%E9%99%90%E7%AD%89%E5%BE%85/</guid>
      <description>1.静态同步与 synchronized(class)    静态同步锁定的是类。
  多个对象共用一把锁
同一个类如果使用常量字符（常量字符串是存放在缓存中）串作为 synchronized(string) 对象监视器，并且对象 A 的同步方法中有死循环，那么其他对象无法调用该同步方法，表现为无限等待（其他线程被锁住）。
  一个对象一把锁
使用局部变量的方式可以避免锁住其他线程。
  2. synchronized 无限等待    因为 synchronized 锁定的是对象，同一个对象的方法同步执行，当一个线程执行某个方法存在死循环时，其他线程会陷入无限等待。如下，thread 与 threadB 共用一个 service 。
public class Service { synchronized public void service1(){ System.out.println(&amp;#34;service1&amp;#34;); while (true){ System.out.println(&amp;#34;ha&amp;#34;); } } synchronized public void service2(){ System.out.println(&amp;#34;service2&amp;#34;); } } public class MyThread extends Thread{ Service service; public MyThread(Service service){ this.service = service; } @Override public void run(){ super.</description>
    </item>
    
    <item>
      <title>2.1同步</title>
      <link>http://example.org/2.%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/2.1%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Wed, 08 Sep 2021 20:59:04 +0800</pubDate>
      
      <guid>http://example.org/2.%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/2.1%E5%90%8C%E6%AD%A5/</guid>
      <description>1. 单例模式下并发访问同一个对象的内容    synchnized 同步锁，使得调用方法变成同步访问对象属性。
2.多个对象多把锁    方法带有 synchronized 则一个对象带有一把锁，多个对象在 JVM 中是异步的，所以多个对象的多把锁表现为异步的。
3. 脏读    setValue() 时，中途进行 getValue() ，如果 getValue() 没有同步则可能出现脏读。
同步锁作用于对象，非同步方法可以异步调用，同一对象的多个同步方法是同步调用。
public class MyObject { private String userName = &amp;#34;A&amp;#34;; private String password = &amp;#34;AA&amp;#34;; synchronized public void setValue(String userName, String password){ this.userName = userName; try { Thread.sleep(3000);//delay cause the dirtyRead  }catch (Exception e){ } this.password = password; } public void getValue(){ System.</description>
    </item>
    
  </channel>
</rss>
