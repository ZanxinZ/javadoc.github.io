<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>简介 on 技术学习笔记</title>
    <link>http://example.org/</link>
    <description>Recent content in 简介 on 技术学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Sep 2021 00:44:56 +0800</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3.2生产者消费者模式</title>
      <link>http://example.org/3.%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/3.2%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 22 Sep 2021 11:23:40 +0800</pubDate>
      
      <guid>http://example.org/3.%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/3.2%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>问题：
 threadP 在 setValue 时，lock.wait 失去了锁, 线程还会继续存在吗？ 『解答』还会继续存在, 但是处于 waiting 状态。没有能力去获取同步锁。
  锁是可以重入的，是否意味着在 while 循环的作用下，会多次调用 setValue，而有一部分的调用被阻塞了得不到响应？ 『解答』不会多次调用 setValue。
  锁可以重入，在上一个 lock.wait 未响应的情况下，是否可以再进入同步块进行对应操作？ 『解答』执行了 lock.wait 线程就被挂起，进入 waiting 状态。
  一个生产者、一个消费者 基于 wait/notify 机制 P.java
public class P { String lock; public P(String lock){ this.lock = lock; } public void setValue(){ try{ synchronized(lock){ if (!ValueObject.value.equals(&amp;#34;&amp;#34;)){ lock.wait();//lock will be release, but thread exist always.  } String str = System.</description>
    </item>
    
    <item>
      <title>3.1等待与通知机制</title>
      <link>http://example.org/3.%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/3.1%E7%AD%89%E5%BE%85%E4%B8%8E%E9%80%9A%E7%9F%A5%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Thu, 09 Sep 2021 20:03:54 +0800</pubDate>
      
      <guid>http://example.org/3.%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/3.1%E7%AD%89%E5%BE%85%E4%B8%8E%E9%80%9A%E7%9F%A5%E6%9C%BA%E5%88%B6/</guid>
      <description>while 轮询存在缺陷      A 线程执行每一步的时间较长。
public class ThreadA extends Thread{ private MyList list; public ThreadA(MyList list){ super(); this.list = list; } @Override public void run(){ super.run(); try{ for (int i = 0; i &amp;lt; 10; i++) { list.add(); System.out.println(Thread.currentThread().getName() + &amp;#34; Add &amp;#34; + i); Thread.sleep(1000); } }catch (InterruptedException e){ e.printStackTrace(); } } }   B线程执行轮询的时间较短
public class ThreadB extends Thread{ private MyList list; public ThreadB(MyList list){ super(); this.</description>
    </item>
    
    <item>
      <title>2.3其它方法</title>
      <link>http://example.org/2.%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/2.3%E5%85%B6%E5%AE%83%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 08 Sep 2021 21:17:32 +0800</pubDate>
      
      <guid>http://example.org/2.%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/2.3%E5%85%B6%E5%AE%83%E6%96%B9%E6%B3%95/</guid>
      <description>1. volatile 关键字    为了实现变量在多个线程间可见。使得线程从公共堆栈中获取变量，而不是线程私有数据栈。
JVM 在 -sever 模式时为了线程运行效率，线程一直在私有堆栈中获取变量值，而主线程的变量是存储在公共堆栈中，解决这种可见性问题，可以使用 volatile 。
volatile 与 synchronized 的比较：
  volatile 保证可见性但不保证原子性（致命缺点），synchronized 保证原子性但不保证可见性。
  volatile 只能修饰变量。
  volatile 不发生阻塞，synchronized 会阻塞。
  2. 原子类    多线程使用原子操作访问共享资源时，不需要锁也可保证线程安全（多线程访问同一资源时，不会出现脏读或写失败）。
以下代码，多个线程竞争地访问同一个对象中的 count ， 使用原子操作保证了线程安全。
  CountService.java
public class CountService extends Thread{ private AtomicInteger count = new AtomicInteger(0);//原子类  @Override public void run(){ for (int i = 0; i &amp;lt; 1000; i++){ System.</description>
    </item>
    
    <item>
      <title>2.2同步中的无限等待</title>
      <link>http://example.org/2.%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/2.2%E5%90%8C%E6%AD%A5%E4%B8%AD%E7%9A%84%E6%97%A0%E9%99%90%E7%AD%89%E5%BE%85/</link>
      <pubDate>Wed, 08 Sep 2021 21:04:03 +0800</pubDate>
      
      <guid>http://example.org/2.%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/2.2%E5%90%8C%E6%AD%A5%E4%B8%AD%E7%9A%84%E6%97%A0%E9%99%90%E7%AD%89%E5%BE%85/</guid>
      <description>1.静态同步与 synchronized(class)    静态同步锁定的是类。
  多个对象共用一把锁
同一个类如果使用常量字符（常量字符串是存放在缓存中）串作为 synchronized(string) 对象监视器，并且对象 A 的同步方法中有死循环，那么其他对象无法调用该同步方法，表现为无限等待（其他线程被锁住）。
  一个对象一把锁
使用局部变量的方式可以避免锁住其他线程。
  2. synchronized 无限等待    因为 synchronized 锁定的是对象，同一个对象的方法同步执行，当一个线程执行某个方法存在死循环时，其他线程会陷入无限等待。如下，thread 与 threadB 共用一个 service 。
public class Service { synchronized public void service1(){ System.out.println(&amp;#34;service1&amp;#34;); while (true){ System.out.println(&amp;#34;ha&amp;#34;); } } synchronized public void service2(){ System.out.println(&amp;#34;service2&amp;#34;); } } public class MyThread extends Thread{ Service service; public MyThread(Service service){ this.service = service; } @Override public void run(){ super.</description>
    </item>
    
    <item>
      <title>2.1同步</title>
      <link>http://example.org/2.%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/2.1%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Wed, 08 Sep 2021 20:59:04 +0800</pubDate>
      
      <guid>http://example.org/2.%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%8F%98%E9%87%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/2.1%E5%90%8C%E6%AD%A5/</guid>
      <description>1. 单例模式下并发访问同一个对象的内容    synchnized 同步锁，使得调用方法变成同步访问对象属性。
2.多个对象多把锁    方法带有 synchronized 则一个对象带有一把锁，多个对象在 JVM 中是异步的，所以多个对象的多把锁表现为异步的。
3. 脏读    setValue() 时，中途进行 getValue() ，如果 getValue() 没有同步则可能出现脏读。
同步锁作用于对象，非同步方法可以异步调用，同一对象的多个同步方法是同步调用。
public class MyObject { private String userName = &amp;#34;A&amp;#34;; private String password = &amp;#34;AA&amp;#34;; synchronized public void setValue(String userName, String password){ this.userName = userName; try { Thread.sleep(3000);//delay cause the dirtyRead  }catch (Exception e){ } this.password = password; } public void getValue(){ System.</description>
    </item>
    
    <item>
      <title>1.2线程控制</title>
      <link>http://example.org/1.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/1.2%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Wed, 08 Sep 2021 20:38:08 +0800</pubDate>
      
      <guid>http://example.org/1.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/1.2%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>停止线程      this.interrupted() 测试当前线程是否已经是中断状态，执行后把标志位设置为 false 。
  this.isInterrupted() 测试线程 Thread 是否已经中断，但不清除标志位。
  thread.interrupt()，run 方法中有sleep，使用try的 catch**可以捕捉到 InterruptedException **的。
  异常法停止一个线程，抛出 InterruptedException 。（推荐）
  thread.stop() 暴力停止，不推荐。
  使用 return 停止线程。
  暂停线程     suspend 与resume 它们的缺陷：独占（不同步）。如果子线程中有调用 synchronized 方法，将导致同步锁可能未被释放，在主线程调用相同 synchronized 方法时无法获得锁，程序卡住。  yield 方法    交出控制权
thread.yield()
放弃当前 CPU 资源，让给其他任务去占用。（但放弃的时间不确定，可能很短）
牺牲自我，成就他人。
线程优先级    A 调用 B ，则默认的， B 的优先级与 A 一致。</description>
    </item>
    
    <item>
      <title>Life</title>
      <link>http://example.org/blog/life/</link>
      <pubDate>Wed, 08 Sep 2021 18:37:17 +0800</pubDate>
      
      <guid>http://example.org/blog/life/</guid>
      <description>关于 Hugo GeekDoc     GitHub 先新建一个仓库，并配置 Github Pages。 下载 geekdoc 的 release，放到 theme 文件夹下。 配置config.toml baseURL = &amp;#39;http://example.org/&amp;#39; languageCode = &amp;#39;en-us&amp;#39; title = &amp;#39;技术学习笔记&amp;#39; theme = &amp;#34;hugo-geekdoc&amp;#34; # Match the github rule. publishdir = &amp;#34;./docs/&amp;#34; pluralizeListTitles = false # Geekdoc required configuration pygmentsUseClasses = true pygmentsCodeFences = true disablePathToLower = true # Needed for mermaid shortcodes [markup] [markup.goldmark.renderer] # Needed for mermaid shortcode unsafe = true [markup.tableOfContents] startLevel = 1 endLevel = 9 [taxonomies] tag = &amp;#34;tags&amp;#34;  开始写文章 hugo new blog/life.</description>
    </item>
    
    <item>
      <title>1.1线程新建</title>
      <link>http://example.org/1.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/1.1%E6%96%B0%E5%BB%BA%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Wed, 08 Sep 2021 17:54:12 +0800</pubDate>
      
      <guid>http://example.org/1.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/1.1%E6%96%B0%E5%BB%BA%E7%BA%BF%E7%A8%8B/</guid>
      <description>以 Thread 实例的方式    Mythread.java
package threadTest; public class MyThread extends Thread{ @Override public void run(){ super.run(); for (int i = 0; i &amp;lt; 100; i++){ System.out.println(&amp;#34;MyThread:&amp;#34; + i); } } } Main.java
package threadTest; public class main { public static void main(String[] args){ MyThread myThread = new MyThread(); myThread.start(); MyThread myThread1 = new MyThread(); myThread1.start(); System.out.println(&amp;#34;Has been ran&amp;#34;); } } 以包装 Runnable 的方式    因为 Runnable 接口中只有 run 方法，无法启动一个新的线程。所以借由 Thread 的构造，可以新建线程。</description>
    </item>
    
  </channel>
</rss>
